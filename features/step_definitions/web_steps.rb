# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#

## READ MEEEEE!!!!! 
# when ready to use, delete the below given and uncomment the rest of the code


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Our custom step definitions

Given /the following users exist:/ do |users_table|
  users_table.hashes.each do |user|
    # each returned element will be a hash whose key is the table header.
    User.create(user)
  end
end

Given /the following admins exist:/ do |users_table|
  users_table.hashes.each do |user|
    # each returned element will be a hash whose key is the table header.
    u = User.create(user)
    u.update_attribute(:admin, true)
  end
end

Given /the following projects exist:/ do |projects_table|
  projects_table.hashes.each do |project|
    # each returned element will be a hash whose key is the table header.
    p = Project.create!({:title => project["title"], :description => project["description"], :spec_urls => project["spec_urls"], :proj_id => project["proj_id"], :students => project["students"]})
    p.company = Company.find_by(name: project["company"])
  end
end

Given /the following forums exist:/ do |forums_table|
  forums_table.hashes.each do |forum|
    # each returned element will be a hash whose key is the table header.
    p = Forum.create!({:title => forum["title"], :id => forum["id"]})
  end
end

Given /the following messages exist:/ do |messages_table|
  messages_table.hashes.each do |message|
    # each returned element will be a hash whose key is the table header.
    p = Message.create!({:title => message["title"], :forum_id => message["forum_id"], :description => message["description"], :id => message["id"] , :author => message["author"]})
  end
end

Given /the following companies exist:/ do |companies_table|
  companies_table.hashes.each do |company|
    # each returned element will be a hash whose key is the table header.
    Company.create(company)
  end
end

Given /^the company with the name "([^"]*)" owns the project named "([^"]*)"$/ do |company_name, project_title|
  company = Company.find_by(name: company_name)
  project = Project.find_by(title: project_title)
  company.projects << project
end

Given /^the user with email "([^"]*)" is assigned the project named "([^"]*)"$/ do |email, title|
  user = User.find_by(email: email)
  project = Project.find_by(title: title)
  user.projects << project
end

Given /^the following users, forums, messages, and projects are associated/ do |table|
  table.hashes.each do |hash|
    user = User.find_by(id: hash["user_id"])
    forum = Forum.find_by(id: hash["forum_id"])
    message = Message.find_by(id: hash["message_id"])
    project = Project.find_by(id: hash["project_id"])
    project.forum =forum
    forum.messages << message
    message.author = user.email
    project.users << user
  end
end
Given /^the following companies, forums, messages, and projects are associated/ do |table|
  table.hashes.each do |hash|
    company = Company.find_by(id: hash["company_id"])
    forum = Forum.find_by(id: hash["forum_id"])
    message = Message.find_by(id: hash["message_id"])
    project = Project.find_by(id: hash["project_id"])
    project.forum = forum
    forum.messages << message
    message.author = company.email
    company.projects << project
  end
end
Given /^I sign in with "([^"]*)" and "([^"]*)"$/ do |email, password|
  visit new_user_session_path
  step "I fill in the following:", table(%Q(
    | user[email]    | #{email}     |
    | user[password] | #{password}  |
  ))
  step 'I press "Log in"'
end

Given /^I sign in with email "([^"]*)" and password "([^"])"$/ do |email, password|
  visit new_user_session_path
  step "I fill in the following:", table(%Q(
    | user[email]    | #{email}    |
    | user[password] | #{password} |
  ))
  step 'I press "Log in"'
end

Given /the project assigned to me is "(.*?)"/ do |proj|
  #proj is in current_user.projects
  fail "Unimplemented"
end

Given /I am the company "(.*?)"/ do |comp|
  #current_company.name == comp
  fail "Unimplemented"
end

Given /I am on the user page $/ do
  #visit path_to()
  fail "Unimplemented"
end

Given /the project assigned to me is called "([^"]*)"$/ do |proj|
  fail "Unimplemented"
end

Given /I sign in as a company with email "(.*?)" and password "(.*?)"/ do |email, password|
  step 'I am on the home page'
  step 'I follow "Sign In"'
  step 'I follow "Click here for companies"'
  step 'I fill in "company[email]" with "#{email}"'
  step 'I fill in "company[password]" with "#{password}"'
  step 'I press "Log in"'
end

Given /I create a project/ do |project_table|
  fail "Unimplemented"
end


# End of custom step definitions

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select or option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    step %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')

  form_for_input = element.find(:xpath, 'ancestor::form[1]')
  using_formtastic = form_for_input[:class].include?('formtastic')
  error_class = using_formtastic ? 'error' : 'field_with_errors'

  if classes.respond_to? :should
    classes.should include(error_class)
  else
    assert classes.include?(error_class)
  end

  if page.respond_to?(:should)
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      error_paragraph.should have_content(error_message)
    else
      page.should have_content("#{field.titlecase} #{error_message}")
    end
  else
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      assert error_paragraph.has_content?(error_message)
    else
      assert page.has_content?("#{field.titlecase} #{error_message}")
    end
  end
end

Then /^the "([^"]*)" field should have no error$/ do |field|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')
  if classes.respond_to? :should
    classes.should_not include('field_with_errors')
    classes.should_not include('error')
  else
    assert !classes.include?('field_with_errors')
    assert !classes.include?('error')
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end
 
Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end